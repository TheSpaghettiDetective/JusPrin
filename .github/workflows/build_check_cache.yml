name: Check Cache

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      arch:
        required: false
        type: string
      build-deps-only:
        required: false
        type: boolean

jobs:
  check_cache: # determines if there is a cache and outputs variables used in caching process
    name: Check Cache
    runs-on: ${{ inputs.os }}
    outputs:
      cache-key: ${{ steps.set_outputs.outputs.cache-key }}
      cache-path: ${{ steps.set_outputs.outputs.cache-path }}
      valid-cache: ${{ steps.cache_deps.outputs.cache-hit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: 'true'

      - name: set outputs
        id: set_outputs
        env:
          underscore-arch: ${{ inputs.os == 'macos-14' && '_' || ''}}${{ inputs.os == 'macos-14' && inputs.arch || '' }} # if is macos, make a string that does "_{arch}", else output nothing
          dash-arch: ${{ inputs.os == 'macos-14' && '-' || ''}}${{ inputs.os == 'macos-14' && inputs.arch || '' }} # if is macos, make a string that does "-{arch}", else output nothing
          dep-folder-name: ${{ (inputs.os == 'windows-latest' || inputs.os == 'macos-14') && 'OrcaSlicer_dep' || 'destdir' }}
          output-cmd: ${{ inputs.os == 'windows-latest' && '$env:GITHUB_OUTPUT' || '"$GITHUB_OUTPUT"'}}
        run: |
          echo cache-key=${{ inputs.os }}${{ env.dash-arch }}-cache-orcaslicer_deps-build-${{ hashFiles('deps/**') }} >> ${{ env.output-cmd }}
          echo cache-path=${{ github.workspace }}/deps/build${{ env.underscore-arch }}/${{ env.dep-folder-name }}${{ env.underscore-arch }} >> ${{ env.output-cmd }}

          # Debug info
          echo "===== Cache Configuration Debug Info ====="
          echo "OS: ${{ inputs.os }}"
          echo "Arch: ${{ inputs.arch }}"
          echo "underscore-arch: ${{ env.underscore-arch }}"
          echo "dash-arch: ${{ env.dash-arch }}"
          echo "dep-folder-name: ${{ env.dep-folder-name }}"
          echo "Cache Key: ${{ inputs.os }}${{ env.dash-arch }}-cache-orcaslicer_deps-build-${{ hashFiles('deps/**') }}"
          echo "Cache Path: ${{ github.workspace }}/deps/build${{ env.underscore-arch }}/${{ env.dep-folder-name }}${{ env.underscore-arch }}"
          echo "==========================================="

      - name: load cache
        id: cache_deps
        uses: actions/cache@v4
        with:
          path: ${{ steps.set_outputs.outputs.cache-path }}
          key: ${{ steps.set_outputs.outputs.cache-key }}
          lookup-only: true

      - name: Check cache result
        run: |
          echo "===== Cache Check Results ====="
          echo "Cache hit: ${{ steps.cache_deps.outputs.cache-hit }}"
          echo "Cache path: ${{ steps.set_outputs.outputs.cache-path }}"

          if [ "${{ inputs.os }}" == "windows-latest" ]; then
            if [ "${{ steps.cache_deps.outputs.cache-hit }}" == "true" ]; then
              echo "Checking Windows cache directory..."
              dir "${{ steps.set_outputs.outputs.cache-path }}" || echo "Directory not found"
            else
              echo "Cache miss - directory will be created during build"
            fi
          else
            if [ "${{ steps.cache_deps.outputs.cache-hit }}" == "true" ]; then
              echo "Checking Unix cache directory..."
              ls -la "${{ steps.set_outputs.outputs.cache-path }}" || echo "Directory not found"
            else
              echo "Cache miss - directory will be created during build"
            fi
          fi
          echo "================================="

  build_deps: # call next step
    name: Build Deps
    needs: [check_cache]
    uses: ./.github/workflows/build_deps.yml
    with:
      cache-key: ${{ needs.check_cache.outputs.cache-key }}
      cache-path: ${{ needs.check_cache.outputs.cache-path }}
      valid-cache: ${{ needs.check_cache.outputs.valid-cache == 'true' }}
      os: ${{ inputs.os }}
      arch: ${{ inputs.arch }}
      build-deps-only: ${{ inputs.build-deps-only }}
    secrets: inherit
